@page "/yonetim-paneli"
@using IzinTakipProject.Data
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Yonetici,Admin")]

@inject ApplicationDbContext Db
@inject HttpContextAccessor HttpContextAccessor

<h3>Yönetim Paneli - Onay Bekleyen İzinler</h3>

@if (onayBekleyenIzinler.Count == 0)
{
    <p>Onay bekleyen izin yok.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Çalışan</th>
                <th>İzin Türü</th>
                <th>Tarih</th>
                <th>İş Günü</th>
                <th>İşlem</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var izin in onayBekleyenIzinler)
            {
                <tr>
                    <td>@izin.Calisan.AdSoyad</td>
                    <td>@izin.IzinTuru?.Ad</td>
                    <td>@izin.BaslangicTarihi.ToShortDateString() - @izin.BitisTarihi.ToShortDateString()</td>
                    <td>@izin.IsGunuSayisi</td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="() => Onayla(izin)">Onayla</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Izin> onayBekleyenIzinler = new();

    protected override async Task OnInitializedAsync()
    {
        var username = HttpContextAccessor.HttpContext.User.Identity.Name;
        var yonetici = await Db.Users.FirstOrDefaultAsync(x => x.UserName == username);

        if (yonetici == null) return;

        onayBekleyenIzinler = await Db.Izinler
            .Include(x => x.Calisan)
            .Include(x => x.IzinTuru)
            .Where(i => !i.OnaylandiMi && i.Calisan.YoneticiId == yonetici.Id
    )
            .ToListAsync();
    }


    private async Task Onayla(Izin izin)
    {
        izin.OnaylandiMi = true;
        await Db.SaveChangesAsync();
        onayBekleyenIzinler.Remove(izin);
    }
}
